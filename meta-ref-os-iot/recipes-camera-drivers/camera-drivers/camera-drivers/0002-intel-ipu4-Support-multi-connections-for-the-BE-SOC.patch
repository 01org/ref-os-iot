From 5a76b128448d624da7cc0f9abf9bbf13bc1dd730 Mon Sep 17 00:00:00 2001
From: Soren Friis <soren.friis@intel.com>
Date: Mon, 15 May 2017 15:24:53 +0300
Subject: [PATCH 2/3] intel-ipu4: Support multi-connections for the BE SOC

The sink pad for all media entities was hard-coded to
zero in the isys driver. This works okay for the CSI2 BE
device since only a single camera can be active on the
CSI2 BE device at a time.

However, for the CSI2 BE SOC device, it must support
more than one active camera simultaneously. Change
the driver to recognize which BE SOC Capture device is
being turned on and pass the number of that as the
active sink pad number on the CSI2 BE SOC device.

Change-Id: Ia503c269c9c8a438c9bb16c3a8ede9c6ad454a4e
Tracked-On:
Signed-off-by: Soren Friis <soren.friis@intel.com>
---
 drivers/media/pci/intel-ipu4/intel-ipu4-isys.c | 41 ++++++++++++++++++++------
 1 file changed, 32 insertions(+), 9 deletions(-)

diff --git a/drivers/media/pci/intel-ipu4/intel-ipu4-isys.c b/drivers/media/pci/intel-ipu4/intel-ipu4-isys.c
index 53ab445..70f75c4 100644
--- a/drivers/media/pci/intel-ipu4/intel-ipu4-isys.c
+++ b/drivers/media/pci/intel-ipu4/intel-ipu4-isys.c
@@ -202,19 +202,29 @@ static int intel_ipu4_pipeline_pm_power_one(struct media_entity *entity,
  * Return 0 on success or a negative error code on failure.
  */
 static int intel_ipu4_pipeline_pm_power(struct media_entity *entity,
-					int change)
+					int change, int capture_device_nr)
 {
 	struct media_entity_graph graph;
 	struct media_entity *first = entity;
 	int ret = 0;
+	const char str_be_soc[] = "Intel IPU4 CSI2 BE SOC";
+	int pad = 0;
 
 	if (!change)
 		return 0;
 
+	/*
+	 * The numbers for the "Intel IPU4 BE SOC capture xxx" devices
+	 * correspond to the the sink pad numbers on the "Intel IPU4 CSI2 BE
+	 * SOC" device.
+	 */
+	if (strstr(entity->name, str_be_soc))
+		pad = capture_device_nr;
+
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
 	media_entity_graph_walk_init(&graph, entity->graph_obj.mdev);
 #endif
-	media_entity_graph_walk_start(&graph, &entity->pads[0]);
+	media_entity_graph_walk_start(&graph, &entity->pads[pad]);
 
 	while (!ret && (entity = media_entity_graph_walk_next(&graph)))
 		if (!is_media_entity_v4l2_io(entity))
@@ -229,7 +239,7 @@ static int intel_ipu4_pipeline_pm_power(struct media_entity *entity,
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
 	media_entity_graph_walk_init(&graph, entity->graph_obj.mdev);
 #endif
-	media_entity_graph_walk_start(&graph, &first->pads[0]);
+	media_entity_graph_walk_start(&graph, &first->pads[pad]);
 
 	while ((first = media_entity_graph_walk_next(&graph))
 	       && first != entity)
@@ -254,6 +264,7 @@ static int intel_ipu4_pipeline_pm_power(struct media_entity *entity,
  * off is assumed to never fail. No failure can occur when the use parameter is
  * set to 0.
  */
+#define CAPTURE_DEVICE_NR_UNKNOWN	0 /* Assume device zero by default */
 int intel_ipu4_pipeline_pm_use(struct media_entity *entity, int use)
 {
 	int change = use ? 1 : -1;
@@ -272,7 +283,8 @@ int intel_ipu4_pipeline_pm_use(struct media_entity *entity, int use)
 	WARN_ON(entity->use_count < 0);
 
 	/* Apply power change to connected non-nodes. */
-	ret = intel_ipu4_pipeline_pm_power(entity, change);
+	ret = intel_ipu4_pipeline_pm_power(entity, change,
+					   CAPTURE_DEVICE_NR_UNKNOWN);
 	if (ret < 0)
 		entity->use_count -= change;
 
@@ -310,25 +322,36 @@ static int intel_ipu4_pipeline_link_notify(struct media_link *link, u32 flags,
 	int source_use = intel_ipu4_pipeline_pm_use_count(link->source);
 	int sink_use = intel_ipu4_pipeline_pm_use_count(link->sink);
 	int ret;
+	const char str_be_soc_capture[] = "Intel IPU4 BE SOC capture";
+	int capture_device_nr = 0;
+
+	if (strstr(sink->name, str_be_soc_capture))
+		sscanf(sink->name + sizeof(str_be_soc_capture),
+		       "%d", &capture_device_nr);
 
 	if (notification == MEDIA_DEV_NOTIFY_POST_LINK_CH &&
 	    !(flags & MEDIA_LNK_FL_ENABLED)) {
 		/* Powering off entities is assumed to never fail. */
-		intel_ipu4_pipeline_pm_power(source, -sink_use);
-		intel_ipu4_pipeline_pm_power(sink, -source_use);
+		intel_ipu4_pipeline_pm_power(source, -sink_use,
+					     capture_device_nr);
+		intel_ipu4_pipeline_pm_power(sink, -source_use,
+					     capture_device_nr);
 		return 0;
 	}
 
 	if (notification == MEDIA_DEV_NOTIFY_PRE_LINK_CH &&
 		(flags & MEDIA_LNK_FL_ENABLED)) {
 
-		ret = intel_ipu4_pipeline_pm_power(source, sink_use);
+		ret = intel_ipu4_pipeline_pm_power(source, sink_use,
+						   capture_device_nr);
 		if (ret < 0)
 			return ret;
 
-		ret = intel_ipu4_pipeline_pm_power(sink, source_use);
+		ret = intel_ipu4_pipeline_pm_power(sink, source_use,
+						   capture_device_nr);
 		if (ret < 0)
-			intel_ipu4_pipeline_pm_power(source, -sink_use);
+			intel_ipu4_pipeline_pm_power(source, -sink_use,
+						     capture_device_nr);
 
 		return ret;
 	}
-- 
2.7.4

