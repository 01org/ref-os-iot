From e9dfc08992eea93afd8f3d4c00a6afab7aaa5924 Mon Sep 17 00:00:00 2001
From: Evgeny Kalugin <evgeny.kalugin@intel.com>
Date: Mon, 22 May 2017 15:03:26 +0300
Subject: [PATCH] Backported original patch below to 1.0.39 release

From: Mark Young <marky@lunarg.com>
Date: Tue, 25 Apr 2017 08:08:29 -0600
Subject: [PATCH] loader : gh1675 - Further strncat changes

This doesn't completely satisfy GH 1675, but at least resolves a
few of the holes discovered by @randomascii.

Change-Id: Idb2273851e36d4470d2f14cb09d6ac1c314497a8
---
 loader/loader.c | 38 ++++++++++++++++++++++++++------------
 1 file changed, 26 insertions(+), 12 deletions(-)

diff --git a/loader/loader.c b/loader/loader.c
index 24758f4..994eb62 100644
--- a/loader/loader.c
+++ b/loader/loader.c
@@ -445,7 +445,7 @@ void loader_log(const struct loader_instance *inst, VkFlags msg_type,
                 int32_t msg_code, const char *format, ...) {
     char msg[512];
     char cmd_line_msg[512];
-    uint16_t cmd_line_size = sizeof(cmd_line_msg);
+    size_t cmd_line_size = sizeof(cmd_line_msg);
     va_list ap;
     int ret;
 
@@ -467,6 +467,8 @@ void loader_log(const struct loader_instance *inst, VkFlags msg_type,
     }
 
     cmd_line_msg[0] = '\0';
+    cmd_line_size -= 1;
+    size_t original_size = cmd_line_size;
 
     va_start(ap, format);
     if ((msg_type & LOADER_INFO_BIT) != 0) {
@@ -474,47 +476,59 @@ void loader_log(const struct loader_instance *inst, VkFlags msg_type,
         cmd_line_size -= 4;
     }
     if ((msg_type & LOADER_WARN_BIT) != 0) {
-        if (cmd_line_size != sizeof(cmd_line_msg)) {
-            strcat(cmd_line_msg, " | ");
+        if (cmd_line_size != original_size) {
+            strncat(cmd_line_msg, " | ", cmd_line_size);
             cmd_line_size -= 3;
         }
         strcat(cmd_line_msg, "WARNING");
         cmd_line_size -= 7;
     }
     if ((msg_type & LOADER_PERF_BIT) != 0) {
-        if (cmd_line_size != sizeof(cmd_line_msg)) {
-            strcat(cmd_line_msg, " | ");
+        if (cmd_line_size != original_size) {
+            strncat(cmd_line_msg, " | ", cmd_line_size);
             cmd_line_size -= 3;
         }
         strcat(cmd_line_msg, "PERF");
         cmd_line_size -= 4;
     }
     if ((msg_type & LOADER_ERROR_BIT) != 0) {
-        if (cmd_line_size != sizeof(cmd_line_msg)) {
-            strcat(cmd_line_msg, " | ");
+        if (cmd_line_size != original_size) {
+            strncat(cmd_line_msg, " | ", cmd_line_size);
             cmd_line_size -= 3;
         }
         strcat(cmd_line_msg, "ERROR");
         cmd_line_size -= 5;
     }
     if ((msg_type & LOADER_DEBUG_BIT) != 0) {
-        if (cmd_line_size != sizeof(cmd_line_msg)) {
-            strcat(cmd_line_msg, " | ");
+        if (cmd_line_size != original_size) {
+            strncat(cmd_line_msg, " | ", cmd_line_size);
             cmd_line_size -= 3;
         }
         strcat(cmd_line_msg, "DEBUG");
         cmd_line_size -= 5;
     }
-    if (cmd_line_size != sizeof(cmd_line_msg)) {
-        strcat(cmd_line_msg, ": ");
+    if (cmd_line_size != original_size) {
+        strncat(cmd_line_msg, ": ", cmd_line_size);
         cmd_line_size -= 2;
     }
-    strncat(cmd_line_msg, msg, cmd_line_size);
+
+    if (0 < cmd_line_size) {
+        // If the message is too long, trim it down
+        if (strlen(msg) > cmd_line_size) {
+            msg[cmd_line_size - 1] = '\0';
+        }
+        strncat(cmd_line_msg, msg, cmd_line_size);
+    } else {
+        // Shouldn't get here, but check to make sure if we've already overrun
+        // the string boundary
+        assert(false);
+    }
 
 #if defined(WIN32)
     OutputDebugString(cmd_line_msg);
     OutputDebugString("\n");
 #endif
+
     fputs(cmd_line_msg, stderr);
     fputc('\n', stderr);
 }
-- 
2.7.4

