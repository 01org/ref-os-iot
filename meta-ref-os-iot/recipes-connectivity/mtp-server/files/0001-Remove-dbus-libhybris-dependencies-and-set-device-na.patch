From 9f56ede5800a07970990153a8399a6b2bc6266cd Mon Sep 17 00:00:00 2001
From: Matti Paasto <matti.paasto@intel.com>
Date: Wed, 15 Mar 2017 18:40:49 +0200
Subject: [PATCH] Remove dbus libhybris dependencies and set device name

Signed-off-by: Matti Paasto <matti.paasto@intel.com>
---
 CMakeLists.txt        |   4 -
 server/CMakeLists.txt |   1 -
 server/server.cpp     | 250 ++++++++++++--------------------------------------
 src/MtpServer.cpp     |  15 ++-
 4 files changed, 68 insertions(+), 202 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 46bff47..da2c1f0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,7 +14,6 @@ set(MTP_VERSION_MINOR 0)
 set(MTP_VERSION_PATCH 0)
 
 find_package(Boost REQUIRED COMPONENTS thread system filesystem unit_test_framework)
-pkg_check_modules(DBUSCPP REQUIRED dbus-cpp)
 pkg_check_modules(GLOG REQUIRED libglog)
 
 set(
@@ -61,7 +60,6 @@ include_directories(
     include/
     libusbhost/include
     ${Boost_INCLUDE_DIRS}
-    ${DBUSCPP_INCLUDE_DIRS}
 )
 
 add_library(
@@ -71,9 +69,7 @@ add_library(
 
 target_link_libraries(
   mtpserver
-  android-properties
   ${GLOG_LIBRARIES}
-  ${DBUSCPP_LIBRARIES}
 )
 
 set_target_properties(
diff --git a/server/CMakeLists.txt b/server/CMakeLists.txt
index 411ff46..9acb974 100644
--- a/server/CMakeLists.txt
+++ b/server/CMakeLists.txt
@@ -11,7 +11,6 @@ target_link_libraries(
     mtp-server
     mtpserver
     usbhost
-    android-properties
     ${Boost_LIBRARIES}
     ${Boost_thread_LIBRARIES}
     ${Boost_system_LIBRARIES}
diff --git a/server/server.cpp b/server/server.cpp
index 0a9a846..25eea07 100644
--- a/server/server.cpp
+++ b/server/server.cpp
@@ -32,72 +32,11 @@
 #include <libintl.h>
 #include <locale.h>
 
-#include <hybris/properties/properties.h>
-#include <glog/logging.h>
+    #define PROP_VALUE_MAX 92
+    #include <glog/logging.h>
 
-#include <core/dbus/bus.h>
-#include <core/dbus/object.h>
-#include <core/dbus/property.h>
-#include <core/dbus/service.h>
-#include <core/dbus/signal.h>
 
-#include <core/dbus/asio/executor.h>
-#include <core/dbus/types/stl/tuple.h>
-#include <core/dbus/types/stl/vector.h>
-#include <core/dbus/types/struct.h>
-
-
-namespace dbus = core::dbus;
-using namespace android;
-
-namespace core
-{
-dbus::Bus::Ptr the_session_bus()
-{
-    static dbus::Bus::Ptr session_bus = std::make_shared<dbus::Bus>(dbus::WellKnownBus::session);
-    return session_bus;
-}
-
-struct UnityGreeter
-{
-    struct Properties
-    {
-        struct IsActive
-        {
-            inline static std::string name()
-            {
-                return "IsActive";
-            };
-            typedef UnityGreeter Interface;
-            typedef bool ValueType;
-            static const bool readable = true;
-            static const bool writable = false;
-        };
-    };
-};
-}
-
-namespace core
-{
-namespace dbus
-{
-namespace traits
-{
-template<>
-struct Service<core::UnityGreeter>
-{
-    inline static const std::string& interface_name()
-    {
-        static const std::string s
-        {
-            "com.canonical.UnityGreeter"
-        };
-        return s;
-    }
-};
-}
-}
-}
+    using namespace android;
 
 namespace
 {
@@ -114,8 +53,6 @@ class MtpDaemon
 
 private:
     struct passwd *userdata;
-    dbus::Bus::Ptr bus;
-    boost::thread dbus_thread;
 
     // Mtp stuff
     MtpServer* server;
@@ -123,10 +60,6 @@ private:
     MtpStorage* sd_card;
     MtpDatabase* mtp_database;
 
-    // Security
-    std::shared_ptr<core::dbus::Property<core::UnityGreeter::Properties::IsActive> > is_active;
-    bool screen_locked = true;
-
     // inotify stuff
     boost::thread notifier_thread;
     boost::thread io_service_thread;
@@ -160,19 +93,17 @@ private:
 
         storageID++;
 
-        if (!screen_locked) {
             mtp_database->addStoragePath(path,
-                                         std::string(),
-                                         removable->getStorageID(),
-                                         true);
+                std::string(),
+                removable->getStorageID(),
+                true);
             server->addStorage(removable);
-        }
 
-        removables.insert(std::pair<std::string, std::tuple<MtpStorage*, bool> >
-                              (name,
-                               std::make_tuple(removable,
-                                               screen_locked ? false : true)));
-    }
+            removables.insert(std::pair<std::string, std::tuple<MtpStorage*, bool> >
+                                  (name,
+                                   std::make_tuple(removable,
+                                                   true)));
+        }
 
     void add_mountpoint_watch(const std::string& path)
     {
@@ -242,18 +173,7 @@ private:
         read_more_notify();
     }
 
-    void drive_bus()
-    {
-        try {
-            bus->run();
-        }
-        catch (...) {
-            PLOG(ERROR) << "There was an unexpected error in DBus; terminating.";
-            server->stop();
-        }
-    }
-
-public:
+    public:
 
     MtpDaemon(int fd):
         stream_desc(io_svc),
@@ -277,55 +197,33 @@ public:
         mtp_database = new UbuntuMtpDatabase();
 
 
-        // MTP server
-        server = new MtpServer(
-                fd,
-                mtp_database,
-                false,
-                userdata->pw_gid,
-                FileSystemConfig::file_perm,
-                FileSystemConfig::directory_perm);
-
-        // security / screen locking
-        bus = core::the_session_bus();
-        bus->install_executor(core::dbus::asio::make_executor(bus));
-        dbus_thread = boost::thread(&MtpDaemon::drive_bus, this);
-        auto greeter_service = dbus::Service::use_service(bus, "com.canonical.UnityGreeter");
-        dbus::Object::Ptr greeter = greeter_service->object_for_path(dbus::types::ObjectPath("/"));
-
-        is_active = greeter->get_property<core::UnityGreeter::Properties::IsActive>();
-    }
+            // MTP server
+            server = new MtpServer(
+                    fd,
+                    mtp_database,
+                    false,
+                    userdata->pw_gid,
+                    FileSystemConfig::file_perm,
+                    FileSystemConfig::directory_perm);
+        }
 
-    void initStorage()
-    {
-        char product_name[PROP_VALUE_MAX];
+        void initStorage()
+        {
+            char product_name[PROP_VALUE_MAX] = "Intel Device";
 
         // Local storage
-        property_get ("ro.product.model", product_name, "Ubuntu Touch device");
 
-        home_storage = new MtpStorage(
-            MTP_STORAGE_FIXED_RAM,
-            userdata->pw_dir,
-	    product_name,
-            1024 * 1024 * 100,  /* 100 MB reserved space, to avoid filling the disk */
-            false,
-            0  /* Do not check sizes for internal storage */);
-        mtp_database->addStoragePath(std::string(userdata->pw_dir) + "/Documents",
-                                     gettext("Documents"),
-                                     MTP_STORAGE_FIXED_RAM, false);
-        mtp_database->addStoragePath(std::string(userdata->pw_dir) + "/Music",
-                                     gettext("Music"),
-                                     MTP_STORAGE_FIXED_RAM, false);
-        mtp_database->addStoragePath(std::string(userdata->pw_dir) + "/Videos",
-                                     gettext("Videos"),
-                                     MTP_STORAGE_FIXED_RAM, false);
-        mtp_database->addStoragePath(std::string(userdata->pw_dir) + "/Pictures",
-                                     gettext("Pictures"),
-                                     MTP_STORAGE_FIXED_RAM, false);
-        mtp_database->addStoragePath(std::string(userdata->pw_dir) + "/Downloads",
-                                     gettext("Downloads"),
-                                     MTP_STORAGE_FIXED_RAM, false);
-        home_storage_added = false;
+            home_storage = new MtpStorage(
+                MTP_STORAGE_FIXED_RAM,
+                "/media",
+                product_name,
+                1024 * 1024 * 100,  /* 100 MB reserved space, to avoid filling the disk */
+                false,
+                0  /* Do not check sizes for internal storage */);
+            mtp_database->addStoragePath("/media",
+                                         gettext("media"),
+                                         MTP_STORAGE_FIXED_RAM, false);
+            home_storage_added = false;
 
         // Get any already-mounted removable storage.
         path p(std::string("/media/") + userdata->pw_name);
@@ -347,63 +245,37 @@ public:
 
     }
 
-    ~MtpDaemon()
-    {
-        // Cleanup
-        inotify_rm_watch(inotify_fd, watch_fd);
-        io_svc.stop();
-        dbus_thread.detach();
-        notifier_thread.detach();
-        io_service_thread.join();
-        close(inotify_fd);
-    }
+        ~MtpDaemon()
+        {
+            // Cleanup
+            inotify_rm_watch(inotify_fd, watch_fd);
+            io_svc.stop();
+            notifier_thread.detach();
+            io_service_thread.join();
+            close(inotify_fd);
+        }
 
-    void run()
-    {
-        if (is_active->get()) {
-            is_active->changed().connect([this](bool active)
+        void run()
+        {
             {
-                if (!active) {
-                    screen_locked = active;
-                    VLOG(2) << "device was unlocked, adding storage";
-                    if (home_storage && !home_storage_added) {
-                        server->addStorage(home_storage);
-                        home_storage_added = true;
-                    }
-                    BOOST_FOREACH(std::string name, removables | boost::adaptors::map_keys) {
-                        auto t = removables.at(name);
-                        MtpStorage *storage = std::get<0>(t);
-                        bool added = std::get<1>(t);
-                        if (!added) {
-                            mtp_database->addStoragePath(storage->getPath(),
-                                                         std::string(),
-                                                         storage->getStorageID(),
-                                                         true);
-                            server->addStorage(storage);
-                        }
-                    }
+                VLOG(2) << "device is not locked, adding storage";
+                if (home_storage) {
+                    server->addStorage(home_storage);
+                    home_storage_added = true;
                 }
-            });
-        } else {
-            screen_locked = false;
-            VLOG(2) << "device is not locked, adding storage";
-            if (home_storage) {
-                server->addStorage(home_storage);
-                home_storage_added = true;
-            }
-            BOOST_FOREACH(std::string name, removables | boost::adaptors::map_keys) {
-                auto t = removables.at(name);
-                MtpStorage *storage = std::get<0>(t);
-                bool added = std::get<1>(t);
-                if (!added) {
-                    mtp_database->addStoragePath(storage->getPath(),
-                                                 std::string(),
-                                                 storage->getStorageID(),
-                                                 true);
-                    server->addStorage(storage);
+                BOOST_FOREACH(std::string name, removables | boost::adaptors::map_keys) {
+                    auto t = removables.at(name);
+                    MtpStorage *storage = std::get<0>(t);
+                    bool added = std::get<1>(t);
+                    if (!added) {
+                        mtp_database->addStoragePath(storage->getPath(),
+                                                     std::string(),
+                                                     storage->getStorageID(),
+                                                     true);
+                        server->addStorage(storage);
+                    }
                 }
             }
-        }
 
         // start the MtpServer main loop
         server->run();
diff --git a/src/MtpServer.cpp b/src/MtpServer.cpp
index b2d9e9c..e3c7d99 100644
--- a/src/MtpServer.cpp
+++ b/src/MtpServer.cpp
@@ -30,6 +30,7 @@
 #include <errno.h>
 
 #define LOG_TAG "MtpServer"
+#define PROP_VALUE_MAX 92
 
 #include "MtpDebug.h"
 #include "MtpDatabase.h"
@@ -41,7 +42,6 @@
 
 #include <linux/usb/f_mtp.h>
 
-#include <hybris/properties/properties.h>
 
 #include <glog/logging.h>
 
@@ -468,7 +468,9 @@ bool MtpServer::handleRequest() {
 MtpResponseCode MtpServer::doGetDeviceInfo() {
     VLOG(1) <<  __PRETTY_FUNCTION__;
     MtpStringBuffer   string;
-    char prop_value[PROP_VALUE_MAX];
+    char manufacturer[PROP_VALUE_MAX] = "Intel Device";
+    char model[PROP_VALUE_MAX] = "Intel Device";
+    char serialno[PROP_VALUE_MAX] = "0123456789";
 
     MtpObjectFormatList* playbackFormats = mDatabase->getSupportedPlaybackFormats();
     MtpObjectFormatList* captureFormats = mDatabase->getSupportedCaptureFormats();
@@ -500,18 +502,15 @@ MtpResponseCode MtpServer::doGetDeviceInfo() {
     mData.putAUInt16(captureFormats); // Capture Formats
     mData.putAUInt16(playbackFormats);  // Playback Formats
 
-    property_get("ro.product.manufacturer", prop_value, "unknown manufacturer");
-    string.set(prop_value);
+    string.set(manufacturer);
     mData.putString(string);   // Manufacturer
 
-    property_get("ro.product.model", prop_value, "MTP Device");
-    string.set(prop_value);
+    string.set(model);
     mData.putString(string);   // Model
     string.set("1.0");
     mData.putString(string);   // Device Version
 
-    property_get("ro.serialno", prop_value, "????????");
-    string.set(prop_value);
+    string.set(serialno);
     mData.putString(string);   // Serial Number
 
     delete playbackFormats;
-- 
2.7.4

