From 82bdb444647c10f7ffc3aa850e324dadc1eac166 Mon Sep 17 00:00:00 2001
From: Jukka Laitinen <jukka.laitinen@intel.com>
Date: Thu, 11 May 2017 16:42:21 +0300
Subject: [PATCH 11/13] mfd: arizona: Set pdata and supplies for Intel WM8998

This adds the required pdata and regulator configurations to
arizona-i2c driver for the intel 570x audio mezzanine card.

Signed-off-by: Jukka Laitinen <jukka.laitinen@intel.com>
---
 drivers/mfd/arizona-i2c.c | 137 +++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 136 insertions(+), 1 deletion(-)

diff --git a/drivers/mfd/arizona-i2c.c b/drivers/mfd/arizona-i2c.c
index ddc20c0..7fb90a3 100644
--- a/drivers/mfd/arizona-i2c.c
+++ b/drivers/mfd/arizona-i2c.c
@@ -24,6 +24,122 @@
 
 #include "arizona.h"
 
+/************************************************************/
+#include <linux/input.h>
+#include <linux/platform_device.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/fixed.h>
+#include <linux/mfd/arizona/pdata.h>
+#include <linux/mfd/arizona/registers.h>
+
+/***********WM8998 1.8V REGULATOR*************/
+static struct regulator_consumer_supply wm8998_consumer1[] = {
+	REGULATOR_SUPPLY("AVDD", "i2c-INT34E0:00"),
+	REGULATOR_SUPPLY("DBVDD1", "i2c-INT34E0:00"),
+	REGULATOR_SUPPLY("LDOVDD", "i2c-INT34E0:00"),
+	REGULATOR_SUPPLY("CPVDD", "i2c-INT34E0:00"),
+	REGULATOR_SUPPLY("DBVDD2", "i2c-INT34E0:00"),
+	REGULATOR_SUPPLY("DBVDD3", "i2c-INT34E0:00"),
+};
+
+/***********WM8998 5V REGULATOR*************/
+static struct regulator_consumer_supply wm8998_consumer2[] = {
+	REGULATOR_SUPPLY("SPKVDDL", "i2c-INT34E0:00"),
+	REGULATOR_SUPPLY("SPKVDDR", "i2c-INT34E0:00"),
+};
+
+static struct regulator_init_data wm8998_data1 = {
+		.constraints = {
+			.always_on = 1,
+		},
+		.num_consumer_supplies	=	ARRAY_SIZE(wm8998_consumer1),
+		.consumer_supplies	=	wm8998_consumer1,
+};
+
+static struct fixed_voltage_config wm8998_config1 = {
+	.supply_name	= "DC_1V8",
+	.microvolts	= 1800000,
+	.gpio		= -EINVAL,
+	.init_data	= &wm8998_data1,
+};
+
+static struct platform_device wm8998_device1 = {
+	.name = "reg-fixed-voltage",
+	.id = PLATFORM_DEVID_AUTO,
+	.dev = {
+		.platform_data = &wm8998_config1,
+	},
+};
+
+static struct regulator_init_data wm8998_data2 = {
+		.constraints = {
+			.always_on = 1,
+		},
+		.num_consumer_supplies	=	ARRAY_SIZE(wm8998_consumer2),
+		.consumer_supplies	=	wm8998_consumer2,
+};
+
+static struct fixed_voltage_config wm8998_config2 = {
+	.supply_name	= "DC_5V",
+	.microvolts	= 3700000,
+	.gpio		= -EINVAL,
+	.init_data  = &wm8998_data2,
+};
+
+static struct platform_device wm8998_device2 = {
+	.name = "reg-fixed-voltage",
+	.id = PLATFORM_DEVID_AUTO,
+	.dev = {
+		.platform_data = &wm8998_config2,
+	},
+};
+/***********WM8280 Codec Driver platform data*************/
+static const struct arizona_micd_range micd_ctp_ranges[] = {
+	{ .max =  11, .key = BTN_0 },
+	{ .max =  28, .key = BTN_1 },
+	{ .max =  54, .key = BTN_2 },
+	{ .max = 100, .key = BTN_3 },
+	{ .max = 186, .key = BTN_4 },
+	{ .max = 430, .key = BTN_5 },
+};
+
+static struct arizona_micd_config micd_modes[] = {
+	/*{Acc Det on Micdet1, Use Micbias2 for detection,
+	 * Set GPIO to 1 to selecte this polarity}*/
+	{ 0, 2, 1 },
+};
+
+
+/***********WM8998 Codec Driver platform data*************/
+static const struct arizona_micd_range micd_ctp_ranges_wm8998[] = {
+	{ .max =  93, .key = BTN_0 },
+	{ .max = 110, .key = BTN_1 },
+	{ .max = 136, .key = BTN_2 },
+	{ .max = 182, .key = BTN_3 },
+	{ .max = 268, .key = BTN_4 },
+	{ .max = 512, .key = BTN_5 },
+};
+
+static struct arizona_pdata wm8998_pdata  = {
+	.reset = 0, /*No Reset GPIO from AP, use SW reset*/
+	.ldoena = 0, /*TODO: Add actual GPIO for LDOEN, use SW Control for now*/
+	.irq_flags = IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+	.clk32k_src = ARIZONA_32KZ_MCLK2, /*Onboard OSC provides 32K on MCLK2*/
+	/*IN1 uses both MICBIAS1 and MICBIAS2 based on jack polarity,
+	the below values in dmic_ref only has meaning for DMICs; not AMICs*/
+	.dmic_ref = {ARIZONA_DMIC_MICBIAS1, 0, ARIZONA_DMIC_MICVDD, 0},
+	.inmode = {ARIZONA_INMODE_SE, 0, ARIZONA_INMODE_DMIC, 0},
+	.gpio_base = 0, /* Base allocated by gpio core*/
+	.micd_ranges = micd_ctp_ranges_wm8998,
+	.num_micd_ranges = ARRAY_SIZE(micd_ctp_ranges_wm8998),
+	.micd_configs = micd_modes,
+	.num_micd_configs = ARRAY_SIZE(micd_modes),
+	.micd_rate = 7,
+	.micd_detect_debounce = 100,
+	.micd_force_micbias = true,
+};
+
+/************************************************************/
 static int arizona_i2c_probe(struct i2c_client *i2c,
 			     const struct i2c_device_id *id)
 {
@@ -64,6 +180,7 @@ static int arizona_i2c_probe(struct i2c_client *i2c,
 	case WM1814:
 		if (IS_ENABLED(CONFIG_MFD_WM8998))
 			regmap_config = &wm8998_i2c_regmap;
+		i2c->dev.platform_data = &wm8998_pdata;
 		break;
 	default:
 		dev_err(&i2c->dev, "Unknown device type %ld\n", type);
@@ -135,7 +252,25 @@ static struct i2c_driver arizona_i2c_driver = {
 	.id_table	= arizona_i2c_id,
 };
 
-module_i2c_driver(arizona_i2c_driver);
+static int __init arizona_modinit(void)
+{
+	int ret;
+	/***********WM8998 Register Regulator*************/
+	platform_device_register(&wm8998_device1);
+	platform_device_register(&wm8998_device2);
+
+	ret = i2c_add_driver(&arizona_i2c_driver);
+
+	return ret;
+}
+subsys_initcall(arizona_modinit);
+
+static void __exit arizona_modexit(void)
+{
+	i2c_del_driver(&arizona_i2c_driver);
+}
+
+module_exit(arizona_modexit);
 
 MODULE_DESCRIPTION("Arizona I2C bus interface");
 MODULE_AUTHOR("Mark Brown <broonie@opensource.wolfsonmicro.com>");
-- 
2.7.4

